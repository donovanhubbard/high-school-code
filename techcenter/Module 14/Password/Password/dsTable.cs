//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Password {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsTable : DataSet {
        
        private UserIDDataTable tableUserID;
        
        private Mailing_ListDataTable tableMailing_List;
        
        public dsTable() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsTable(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["UserID"] != null)) {
                    this.Tables.Add(new UserIDDataTable(ds.Tables["UserID"]));
                }
                if ((ds.Tables["Mailing List"] != null)) {
                    this.Tables.Add(new Mailing_ListDataTable(ds.Tables["Mailing List"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UserIDDataTable UserID {
            get {
                return this.tableUserID;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Mailing_ListDataTable Mailing_List {
            get {
                return this.tableMailing_List;
            }
        }
        
        public override DataSet Clone() {
            dsTable cln = ((dsTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["UserID"] != null)) {
                this.Tables.Add(new UserIDDataTable(ds.Tables["UserID"]));
            }
            if ((ds.Tables["Mailing List"] != null)) {
                this.Tables.Add(new Mailing_ListDataTable(ds.Tables["Mailing List"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableUserID = ((UserIDDataTable)(this.Tables["UserID"]));
            if ((this.tableUserID != null)) {
                this.tableUserID.InitVars();
            }
            this.tableMailing_List = ((Mailing_ListDataTable)(this.Tables["Mailing List"]));
            if ((this.tableMailing_List != null)) {
                this.tableMailing_List.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsTable";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsTable.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableUserID = new UserIDDataTable();
            this.Tables.Add(this.tableUserID);
            this.tableMailing_List = new Mailing_ListDataTable();
            this.Tables.Add(this.tableMailing_List);
        }
        
        private bool ShouldSerializeUserID() {
            return false;
        }
        
        private bool ShouldSerializeMailing_List() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void UserIDRowChangeEventHandler(object sender, UserIDRowChangeEvent e);
        
        public delegate void Mailing_ListRowChangeEventHandler(object sender, Mailing_ListRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UserIDDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID_Number;
            
            private DataColumn columnUser_Name;
            
            private DataColumn columnPassword;
            
            internal UserIDDataTable() : 
                    base("UserID") {
                this.InitClass();
            }
            
            internal UserIDDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ID_NumberColumn {
                get {
                    return this.columnID_Number;
                }
            }
            
            internal DataColumn User_NameColumn {
                get {
                    return this.columnUser_Name;
                }
            }
            
            internal DataColumn PasswordColumn {
                get {
                    return this.columnPassword;
                }
            }
            
            public UserIDRow this[int index] {
                get {
                    return ((UserIDRow)(this.Rows[index]));
                }
            }
            
            public event UserIDRowChangeEventHandler UserIDRowChanged;
            
            public event UserIDRowChangeEventHandler UserIDRowChanging;
            
            public event UserIDRowChangeEventHandler UserIDRowDeleted;
            
            public event UserIDRowChangeEventHandler UserIDRowDeleting;
            
            public void AddUserIDRow(UserIDRow row) {
                this.Rows.Add(row);
            }
            
            public UserIDRow AddUserIDRow(int ID_Number, string User_Name, string Password) {
                UserIDRow rowUserIDRow = ((UserIDRow)(this.NewRow()));
                rowUserIDRow.ItemArray = new object[] {
                        ID_Number,
                        User_Name,
                        Password};
                this.Rows.Add(rowUserIDRow);
                return rowUserIDRow;
            }
            
            public UserIDRow FindByID_Number(int ID_Number) {
                return ((UserIDRow)(this.Rows.Find(new object[] {
                            ID_Number})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                UserIDDataTable cln = ((UserIDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new UserIDDataTable();
            }
            
            internal void InitVars() {
                this.columnID_Number = this.Columns["ID Number"];
                this.columnUser_Name = this.Columns["User Name"];
                this.columnPassword = this.Columns["Password"];
            }
            
            private void InitClass() {
                this.columnID_Number = new DataColumn("ID Number", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID_Number);
                this.columnUser_Name = new DataColumn("User Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUser_Name);
                this.columnPassword = new DataColumn("Password", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPassword);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnID_Number}, true));
                this.columnID_Number.AllowDBNull = false;
                this.columnID_Number.Unique = true;
            }
            
            public UserIDRow NewUserIDRow() {
                return ((UserIDRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new UserIDRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(UserIDRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UserIDRowChanged != null)) {
                    this.UserIDRowChanged(this, new UserIDRowChangeEvent(((UserIDRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UserIDRowChanging != null)) {
                    this.UserIDRowChanging(this, new UserIDRowChangeEvent(((UserIDRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UserIDRowDeleted != null)) {
                    this.UserIDRowDeleted(this, new UserIDRowChangeEvent(((UserIDRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UserIDRowDeleting != null)) {
                    this.UserIDRowDeleting(this, new UserIDRowChangeEvent(((UserIDRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveUserIDRow(UserIDRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UserIDRow : DataRow {
            
            private UserIDDataTable tableUserID;
            
            internal UserIDRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableUserID = ((UserIDDataTable)(this.Table));
            }
            
            public int ID_Number {
                get {
                    return ((int)(this[this.tableUserID.ID_NumberColumn]));
                }
                set {
                    this[this.tableUserID.ID_NumberColumn] = value;
                }
            }
            
            public string User_Name {
                get {
                    try {
                        return ((string)(this[this.tableUserID.User_NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserID.User_NameColumn] = value;
                }
            }
            
            public string Password {
                get {
                    try {
                        return ((string)(this[this.tableUserID.PasswordColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserID.PasswordColumn] = value;
                }
            }
            
            public bool IsUser_NameNull() {
                return this.IsNull(this.tableUserID.User_NameColumn);
            }
            
            public void SetUser_NameNull() {
                this[this.tableUserID.User_NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsPasswordNull() {
                return this.IsNull(this.tableUserID.PasswordColumn);
            }
            
            public void SetPasswordNull() {
                this[this.tableUserID.PasswordColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UserIDRowChangeEvent : EventArgs {
            
            private UserIDRow eventRow;
            
            private DataRowAction eventAction;
            
            public UserIDRowChangeEvent(UserIDRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public UserIDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Mailing_ListDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnAddress;
            
            private DataColumn columnCity;
            
            private DataColumn columnFirstName;
            
            private DataColumn columnLastName;
            
            private DataColumn columnMailingListID;
            
            private DataColumn columnPostalCode;
            
            private DataColumn columnPrefix;
            
            private DataColumn columnState;
            
            internal Mailing_ListDataTable() : 
                    base("Mailing List") {
                this.InitClass();
            }
            
            internal Mailing_ListDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            internal DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            internal DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            internal DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            internal DataColumn MailingListIDColumn {
                get {
                    return this.columnMailingListID;
                }
            }
            
            internal DataColumn PostalCodeColumn {
                get {
                    return this.columnPostalCode;
                }
            }
            
            internal DataColumn PrefixColumn {
                get {
                    return this.columnPrefix;
                }
            }
            
            internal DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            public Mailing_ListRow this[int index] {
                get {
                    return ((Mailing_ListRow)(this.Rows[index]));
                }
            }
            
            public event Mailing_ListRowChangeEventHandler Mailing_ListRowChanged;
            
            public event Mailing_ListRowChangeEventHandler Mailing_ListRowChanging;
            
            public event Mailing_ListRowChangeEventHandler Mailing_ListRowDeleted;
            
            public event Mailing_ListRowChangeEventHandler Mailing_ListRowDeleting;
            
            public void AddMailing_ListRow(Mailing_ListRow row) {
                this.Rows.Add(row);
            }
            
            public Mailing_ListRow AddMailing_ListRow(string Address, string City, string FirstName, string LastName, string PostalCode, string Prefix, string State) {
                Mailing_ListRow rowMailing_ListRow = ((Mailing_ListRow)(this.NewRow()));
                rowMailing_ListRow.ItemArray = new object[] {
                        Address,
                        City,
                        FirstName,
                        LastName,
                        null,
                        PostalCode,
                        Prefix,
                        State};
                this.Rows.Add(rowMailing_ListRow);
                return rowMailing_ListRow;
            }
            
            public Mailing_ListRow FindByMailingListID(int MailingListID) {
                return ((Mailing_ListRow)(this.Rows.Find(new object[] {
                            MailingListID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                Mailing_ListDataTable cln = ((Mailing_ListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new Mailing_ListDataTable();
            }
            
            internal void InitVars() {
                this.columnAddress = this.Columns["Address"];
                this.columnCity = this.Columns["City"];
                this.columnFirstName = this.Columns["FirstName"];
                this.columnLastName = this.Columns["LastName"];
                this.columnMailingListID = this.Columns["MailingListID"];
                this.columnPostalCode = this.Columns["PostalCode"];
                this.columnPrefix = this.Columns["Prefix"];
                this.columnState = this.Columns["State"];
            }
            
            private void InitClass() {
                this.columnAddress = new DataColumn("Address", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddress);
                this.columnCity = new DataColumn("City", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCity);
                this.columnFirstName = new DataColumn("FirstName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFirstName);
                this.columnLastName = new DataColumn("LastName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastName);
                this.columnMailingListID = new DataColumn("MailingListID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMailingListID);
                this.columnPostalCode = new DataColumn("PostalCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPostalCode);
                this.columnPrefix = new DataColumn("Prefix", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPrefix);
                this.columnState = new DataColumn("State", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnState);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnMailingListID}, true));
                this.columnMailingListID.AutoIncrement = true;
                this.columnMailingListID.AllowDBNull = false;
                this.columnMailingListID.Unique = true;
            }
            
            public Mailing_ListRow NewMailing_ListRow() {
                return ((Mailing_ListRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Mailing_ListRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Mailing_ListRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Mailing_ListRowChanged != null)) {
                    this.Mailing_ListRowChanged(this, new Mailing_ListRowChangeEvent(((Mailing_ListRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Mailing_ListRowChanging != null)) {
                    this.Mailing_ListRowChanging(this, new Mailing_ListRowChangeEvent(((Mailing_ListRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Mailing_ListRowDeleted != null)) {
                    this.Mailing_ListRowDeleted(this, new Mailing_ListRowChangeEvent(((Mailing_ListRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Mailing_ListRowDeleting != null)) {
                    this.Mailing_ListRowDeleting(this, new Mailing_ListRowChangeEvent(((Mailing_ListRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveMailing_ListRow(Mailing_ListRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Mailing_ListRow : DataRow {
            
            private Mailing_ListDataTable tableMailing_List;
            
            internal Mailing_ListRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableMailing_List = ((Mailing_ListDataTable)(this.Table));
            }
            
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableMailing_List.AddressColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMailing_List.AddressColumn] = value;
                }
            }
            
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableMailing_List.CityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMailing_List.CityColumn] = value;
                }
            }
            
            public string FirstName {
                get {
                    try {
                        return ((string)(this[this.tableMailing_List.FirstNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMailing_List.FirstNameColumn] = value;
                }
            }
            
            public string LastName {
                get {
                    try {
                        return ((string)(this[this.tableMailing_List.LastNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMailing_List.LastNameColumn] = value;
                }
            }
            
            public int MailingListID {
                get {
                    return ((int)(this[this.tableMailing_List.MailingListIDColumn]));
                }
                set {
                    this[this.tableMailing_List.MailingListIDColumn] = value;
                }
            }
            
            public string PostalCode {
                get {
                    try {
                        return ((string)(this[this.tableMailing_List.PostalCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMailing_List.PostalCodeColumn] = value;
                }
            }
            
            public string Prefix {
                get {
                    try {
                        return ((string)(this[this.tableMailing_List.PrefixColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMailing_List.PrefixColumn] = value;
                }
            }
            
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableMailing_List.StateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMailing_List.StateColumn] = value;
                }
            }
            
            public bool IsAddressNull() {
                return this.IsNull(this.tableMailing_List.AddressColumn);
            }
            
            public void SetAddressNull() {
                this[this.tableMailing_List.AddressColumn] = System.Convert.DBNull;
            }
            
            public bool IsCityNull() {
                return this.IsNull(this.tableMailing_List.CityColumn);
            }
            
            public void SetCityNull() {
                this[this.tableMailing_List.CityColumn] = System.Convert.DBNull;
            }
            
            public bool IsFirstNameNull() {
                return this.IsNull(this.tableMailing_List.FirstNameColumn);
            }
            
            public void SetFirstNameNull() {
                this[this.tableMailing_List.FirstNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastNameNull() {
                return this.IsNull(this.tableMailing_List.LastNameColumn);
            }
            
            public void SetLastNameNull() {
                this[this.tableMailing_List.LastNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsPostalCodeNull() {
                return this.IsNull(this.tableMailing_List.PostalCodeColumn);
            }
            
            public void SetPostalCodeNull() {
                this[this.tableMailing_List.PostalCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsPrefixNull() {
                return this.IsNull(this.tableMailing_List.PrefixColumn);
            }
            
            public void SetPrefixNull() {
                this[this.tableMailing_List.PrefixColumn] = System.Convert.DBNull;
            }
            
            public bool IsStateNull() {
                return this.IsNull(this.tableMailing_List.StateColumn);
            }
            
            public void SetStateNull() {
                this[this.tableMailing_List.StateColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Mailing_ListRowChangeEvent : EventArgs {
            
            private Mailing_ListRow eventRow;
            
            private DataRowAction eventAction;
            
            public Mailing_ListRowChangeEvent(Mailing_ListRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Mailing_ListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
